# 2025-05-03
- Fixed typo bellLine -> blueLine when changing methods.
- Removed custom pinch zoom code.
  - Decided to implement a minimap instead.

# 2025-04-15
- Added more methods.
- Made rounds appear over work highlight.

# 2025-04-09
- Added blue line highlight picker.
- Extended temporary sequence length to 500, 100 wasn't enough.
- Highlighted blue line number in blue.
- Added `style` property to createElement(), much easier to do stuff now.
- Put top controls into a sticky container and gave it styling.
- Added transform zoom to sequence SVG, easy to control overall sizing.
- Made the controls much bigger via font-size.
- Zooming:
  - Currently zooming zooms the top controls, this isn't really desirable.
  - Doesn't seem to be a nice way to zoom inside a div.
  - Will need to implement all the transforming stuff myself in JS it seems.
- Coding session:
  - Added renderPinchZoomableSection().
  - Kinda complex handling of touch events, touch states.
  - Keeping a snapshot of the viewport pan and zoom and the set of touches at that point in time.
  - As touch moves happen update the viewport element's transform inplace rather than rerendering.
  - When the set of touches changes bake in the current pinch zoom into the model and re-snapshot.
  - It works!
  - Used chrome://inspect/#devices to connect DevTools to Chrome on phone to debug.
  - Currently panning and zooming don't take each other into account.
  - Pan should be scaled by the current zoom.
  - Zoom should be centered around the touch centre.

# 2025-04-01
- Added basic touch rendering and repeat lines.

# 2025-03-30
- Refactored sequence rendering code out into functions.
- Much neater with each returning a createSvgElement().
- Added work detection and colouring.
- Added grouping for general placement.

# 2025-03-30
- Refactored code to use a createElement helper function.
  - A bit nicer.
- Made the sequence bigger.
  - Too big now, can't zoom out on mobile, maybe was better as it was.
  - Reverted size changes.

# 2025-03-29
- Split render functions out into separate files.
  - Cleans things up a bit.
- Added more SVG elements to render the bells list and places.
- Rendered blue line.
- How to render red line?
  - Not clear when there is a red line.
    - Method could specify maybe.
  - Hunt bell can change, should be a red line?
    - Much harder to detect.
    - But possible.
  - Leaving red lines out for now.
  - Will add as specified on the method maybe and leave out hunt bells.
- Still need to add blue line picker.
- Tried it on mobile, everything is tiny, need to scale everything up 4x.

# 2025-03-26
- Finished implementing the place notation touch overlay code.
- Implemented applying places to the bells.
- Implemented loop until repeat after end of calls.
- TODO:
  - Render bell sequences with place notation and lines and work highlights.
  - Add buttons for editing the touch.

# 2025-03-25
- Implementing the sequence code.
  - computeSequence().
  - computePlaces().
    - For a step index find where in the placeNotation it is and overlay the touches over the beginning/end.
  - Use the places to update the bell sequence.

# 2025-03-23
- Create app that helps plan out bell ringing method conducting.
- Needs:
  - UI:
    - Mobile friendly.
    - Sequence of conductor calls.
      - Plain, bob, single.
      - Editing sequence.
    - Different bell sequence displays.
      - Number grid.
      - Lines.
      - Selected line over number grid.
      - Highlight lead end work sequence.
  - Logic:
    - Method place notation.
    - Lead detection.
    - Repetition detection.
    - True detection.
  - Data model:
    - Saved methods.
      - Presets.
      - Custom saved.
      - Saved conducting sequences.
    - Selected method.
      - Current editing sequence.
- UI implementation.
  - Maybe rojs outputting SVG.
  - Haven't done that before.
  - Had to add the concept of XML namespaces and attributes to get it to work.
    - Tested out creating SVG elements, setting SVG styles, setting SVG attributes dynamically.
  - One problem is SVGs don't take on the size of their contents, they're absolutely sized.
    - Would need like a render callback to keep updating the SVG size on every change maybe.
      - This is a case that Rojs really doesn't work well for.
      - Might instead chunk the output up into multiple known size SVGs.
      - Might have to give them overlapping regions.
    - A non-Rojs approach would be to render everything every time.
      - Probably way simpler and would work perfectly fine.
      - No need for Rojs.
      - Will just do this.
- Implementation
  - Started from scratch with regular HTML inputs.
    - Rerenders everything on any user change.
    - TIL replaceChildren().
  - Defined the initial model state with method definitions.
  - Up to actually rendering the bell sequence.