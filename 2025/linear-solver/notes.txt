# 2025-07-19
- Forgot how these equations answer the original question:
  - Given two rotations, what is a single rotation that achieves the same result?
  - Forgot why = 1 on the right hand side of: (ax + by + cz) * (dx + ey + fz) = 1
  - Isn't that no rotation?
  - Conceptually there was a model that ended up pointing in the (d, e, f) direction but with some arbitrary rotation about that axis.
  - The triangle-sphere just rotates models from (1, 0, 0) to a target (x, y, z) direction which results in a particular rotation about the (x, y, z) axis that's caused by the use of (1, 0, 0).
  - This should be asking what is the (a, b, c) in an (a, b, c) to (d, e, f) rotation that's equivalent to a (1, 0, 0) to (d, e, f) followed by a rotation about (d, e, f).
  - How to express rotating about (d, e, f)?
    - Can rotate (0, 1, 0) and (0, 0, 1) by the same (1, 0, 0) to (d, e, f) rotation and use them.
  - This should result in a rotor g + hxy + ixz + jyz that can be equated to the (ad + be + cf)rr + (ae - bd)xy + (af - cd)xz + (bf - ce)yz rotor.
  - This gives us the actual linear equations to solve:
    - ad + be + cf = g
    - ae - bd = h
    - af - cd = i
    - bf - ce = j
  - Didn't really need that detail about the composite rotations, with the variable substitutions it's very generic.

# 2025-07-13
- Solve linear equations using matrix rref form.
- Aspirational: Accept input equations as strings.
- Pragmatic: Accept coefficient matrix.
- Context:
  - Inspired by failed attempt at solving multivector equation:
    Solve for a, b, c:
    (ax + by + cz) * (dx + ey + fz) = 1
    adxx + aexy + afxz + bdyx + beyy + bfyz + cdzx + cezy + cfzz = 1
    adrr + aexy + afxz - bdxy + berr + bfyz - cdxz - ceyz + cfrr = 1
    (ad + be + cf)rr + (ae - bd)xy + (af - cd)xz + (bf - ce)yz = 1

    ad + be + cf = 1
    ae - bd = 0
    af - cd = 0
    bf - ce = 0

              [d  e  f  0]
    [a b c] * [e -d  0  f] = [1 0 0 0]
              [f  0 -d -e]

    [d  e  f]   [a]   [1]
    [e -d  0] * [b] = [0]
    [f  0 -d]   [c]   [0]
    [0  f -e]         [0]

    [d  e  f | 1]
    [e -d  0 | 0]
    [f  0 -d | 0]
    [0  f -e | 0]

    #1 /= d
    [1 e/d  f/d | 1/d]
    [e  -d    0 |   0]
    [f   0   -d |   0]
    [0   f   -e |   0]

    #2 -= #1 * e
    [1      e/d    f/d |    1/d]
    [0 -d-e*e/d -e*f/d | -e*1/d]
    [f        0     -d |      0]
    [0        f     -e |      0]

    #3 -= #1 * f
    [1      e/d      f/d |    1/d]
    [0 -d-e*e/d   -e*f/d | -e*1/d]
    [0   -f*e/d -d-f*f/d | -f*1/d]
    [0        f       -e |      0]

    #2 /= -d-e*e/d
    [1    e/d               f/d |               1/d]
    [0      1 -e*f/d/(-d-e*e/d) | -e*1/d/(-d-e*e/d)]
    [0 -f*e/d          -d-f*f/d |            -f*1/d]
    [0      f                -e |                 0]

    #1 -= #2 * e/d
    [1      0 f/d-e/d*-e*f/d/(-d-e*e/d) | 1/d-e/d*(-e*1/d/(-d-e*e/d))]
    [0      1         -e*f/d/(-d-e*e/d) |           -e*1/d/(-d-e*e/d)]
    [0 -f*e/d                  -d-f*f/d |                      -f*1/d]
    [0      f                        -e |                           0]

    #3 -= #2 * -f*e/d
    [1 0             f/d-e/d*-e*f/d/(-d-e*e/d) |         1/d-e/d*(-e*1/d/(-d-e*e/d))]
    [0 1                     -e*f/d/(-d-e*e/d) |                   -e*1/d/(-d-e*e/d)]
    [0 0 -d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)) | -f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d))]
    [0 f                                    -e |                                   0]

    #4 -= #2 * f
    [1 0             f/d-e/d*-e*f/d/(-d-e*e/d) |         1/d-e/d*(-e*1/d/(-d-e*e/d))]
    [0 1                     -e*f/d/(-d-e*e/d) |                   -e*1/d/(-d-e*e/d)]
    [0 0 -d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)) | -f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d))]
    [0 0              -e-f*(-e*f/d/(-d-e*e/d)) |              -f*(-e*1/d/(-d-e*e/d))]

    #3 /= -d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))
    [1 0 f/d-e/d*-e*f/d/(-d-e*e/d) |                                                   1/d-e/d*(-e*1/d/(-d-e*e/d))]
    [0 1         -e*f/d/(-d-e*e/d) |                                                             -e*1/d/(-d-e*e/d)]
    [0 0                         1 | (-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)))]
    [0 0  -e-f*(-e*f/d/(-d-e*e/d)) |                                                        -f*(-e*1/d/(-d-e*e/d))]

    #1 -= #3 * (f/d-e/d*-e*f/d/(-d-e*e/d))
    [1 0                        0 | 1/d-e/d*(-e*1/d/(-d-e*e/d))-(f/d-e/d*-e*f/d/(-d-e*e/d))*(-f*(-e*1/d/(-d-e*e/d)))]
    [0 1        -e*f/d/(-d-e*e/d) |                                                                -e*1/d/(-d-e*e/d)]
    [0 0                        1 |    (-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)))]
    [0 0 -e-f*(-e*f/d/(-d-e*e/d)) |                                                           -f*(-e*1/d/(-d-e*e/d))]

    #2 -= #3 * (-e*f/d/(-d-e*e/d))
    [1 0                        0 |                                      1/d-e/d*(-e*1/d/(-d-e*e/d))-(f/d-e/d*-e*f/d/(-d-e*e/d))*(-f*(-e*1/d/(-d-e*e/d)))]
    [0 1                        0 | -e*1/d/(-d-e*e/d)-(-e*f/d/(-d-e*e/d))*((-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))))]
    [0 0                        1 |                                         (-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)))]
    [0 0 -e-f*(-e*f/d/(-d-e*e/d)) |                                                                                                -f*(-e*1/d/(-d-e*e/d))]

    #4 -= #3 * (-e-f*(-e*f/d/(-d-e*e/d)))
    [1 0 0 |                                                  1/d-e/d*(-e*1/d/(-d-e*e/d))-(f/d-e/d*-e*f/d/(-d-e*e/d))*(-f*(-e*1/d/(-d-e*e/d)))]
    [0 1 0 |             -e*1/d/(-d-e*e/d)-(-e*f/d/(-d-e*e/d))*((-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))))]
    [0 0 1 |                                                     (-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)))]
    [0 0 0 | -f*(-e*1/d/(-d-e*e/d))-(-e-f*(-e*f/d/(-d-e*e/d)))*((-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))))]

    a = 1/d-e/d*(-e*1/d/(-d-e*e/d))-(f/d-e/d*-e*f/d/(-d-e*e/d))*(-f*(-e*1/d/(-d-e*e/d)))
    b = -e*1/d/(-d-e*e/d)-(-e*f/d/(-d-e*e/d))*((-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))))
    c = (-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d)))
    0 = -f*(-e*1/d/(-d-e*e/d))-(-e-f*(-e*f/d/(-d-e*e/d)))*((-f*1/d-(-f*e/d)*(-e*1/d/(-d-e*e/d)))/(-d-f*f/d-(-f*e/d)*(-e*f/d/(-d-e*e/d))))

    console.log(`ad + be + cf = ${a*d + b*e + c*f} = 1`);
    console.log(`ae - bd = ${a*e - b*d} = 0`);
    console.log(`af - cd = ${a*f - c*d} = 0`);
    console.log(`bf - ce = ${b*f - c*e} = 0`);
- General equation:
  - For each column, left to right:
    - Make diagonal row hold 1.
    - Make all other rows in the column hold zero.
- UI:
  - A pipeline of execution, waiting for user input at each stage.
  - User presses button to populate next section.

