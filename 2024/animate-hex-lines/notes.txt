# 2025-02-13
- Moved third-party directory up to 2024 for sharing. Still working out git submodule business.
- git submodules are hard. Eventually managed to clean up old submodules and add 2024/third-party/hex-lines fresh.

# 2024-09-14
- Removed reverse-repeat fill mode.
  - Cargo culted from CSS animations.
  - Add back in if actually needed otherwise is probably unnecessary complexity.
- Removed guideLayers in favour of putting a guide boolean on Layer.
  - Will probably want to intersperse guides among the layers.
  - Don't do any fancy relayering of guides for now, just have them participate in the layer layering as normal, probably simpler and more manageable.

# 2024-09-06
- Updated to latest hex-lines with anti-aliasing and opacity support.
- Need plan for initial UI for editing animations.
  - Draw representation of keyframes.

# 2024-08-04
- Moved pixelSize back onto Sprite instead of GroupElement since it's unlikely to want to alter it throughout the sprite.
- Added actual drawing to sampleAnimationData.
  - Extracted it from 2023/draw-hex-lines.
  - copy(JSON.stringify(((hl) => new Array(hl.length).fill(0).flatMap((_, i) => [hl.dataView.getFloat32(i*16, true), hl.dataView.getFloat32(i*16+4, true), hl.dataView.getUint32(i*16+8, true), hl.dataView.getUint32(i*16+12, true)>>4]))(hexLines)))
    - Needed to lift hexLines into a function parameter as it wasn't able to be captured by the lambda otherwise when running in a paused execution environment.
    - Should really just add this to draw-hex-lines.

# 2024-08-03
- Work on filling out sampleAnimationData.
  - Minor fix ups to animation-data.d.ts.
    - Name lineBuffer lineBufferData.
    - Add type values to Element sub interfaces.
    - Add pixelSize and opacity to GroupElement.
- Looked at animation-editor dog-3-stars and animation-pack.d.ts.
  - Added origin to TransformJson.
  - Considering sprites to set framesPerSecond and each keyframe set number of frames.
    - Updated to this.
    - Put FPS on sprite.
    - Added timeScale to SpriteElements.
    - Added separate outerFrame and innerFrame offsets for SpriteElements since they may be different frame rates.
- Implementing Animation.draw().
  - Added keyframe bisect.
  - Still need to add fill mode support, currently just clamps.
  - Got drawing a 2 frame animation working.
- Next:
  - Support fill mode repeat.
  - Support SpriteElements.
  - Support transform animation.
  - Recreate dog-3-stars.

# 2024-07-28
- Transform:
  - Animating transform.
    - Maybe let transform be transform keyframes on everything that has transform.
    - Allowing it on everything might be too much but should be simple to do after doing one and fun to experiment with.
  - Data format:
    - A union of nothing, JSON transform, matrix transform and transform keyframes.
      - Transform keyframes and matrix transformation would both be arrays which clashes, leave matrix tranformation out for now, decide later which one should yield into being an object (probably keyframes).
    - Transform keyframe:
      - Start and duration as usual.
      - Should be able to have static value as well as from/to values.
    - Updated interface definitions to match this.
- What about colour mapping and animating the palette?
  - Could be neat, requires data format designing though.
  - Maybe negative colour values could be used to dip into the different colouring mode.
    - Can't really do this as the colour channels are sent though as u8s.
    - Could maybe use the alpha channel as well though, that's currently just unused padding.
      - See src/2d/utils.h kPointByteLength.
- Dot angles.
  - Currently are based on their instance ID which is volatile as a lineBuffer gets edited or merged with other ones.
  - Maybe setting a negative size for a null point could be used as the angle.
  - Currently the dots are done via two points at the same position surrounded by nulls.
    - Difficult to change this, having only one non-null point would require expanding the viewing window to three points.
    - Maybe have the second point use a negative size which dictates the angle of the hex.
      - A bit complicated and needs branching but maybe okay.
  - Just check if the two points have the same position and read the second point's size for the angle. Shouldn't be a problem for regular lines since they'd get a basically random angle anyway.
    - This allows for unbounded positive and negative angles.
- Perf testing:
  - Running on Linux laptop, Chrome stable M127.
    - Chrome Beta has a bug causing basic WebGL drawing to take multiple frames.
    - Chrome Unstable has a bug causing rendering to be very glitchy and not clearing the buffer.
    - Chrome Stable is still good.
    - 200, 2000, 20000, 200000 dots:
      - Under a frame to render.
    - 2000000 dots:
      - About 2 FPS.
      - Lags the entire computer.
      - Mouse frame rate tanked as well.
      - Wasn't even able to record perf data in DevTools.
    - Being able to handle hundreds of thousands of points on a laptop is a very good sign.
    - This was with a single line buffer however, need to test with multiple layers and opacity blending.
- Render animation.
  - Should write up rendering an animation.
  - Renamed JSON data format to AnimationData.
  - Created Animation class to represent one of these at runtime and hold lineBuffer references.
  - Animation should generate the HexLines2d Drawing (LineDrawing/GroupDrawing) for a given time and cache it.
    - New time renders can reuse existing inner Drawings, maybe mutating their transform etc.
    - Will start off without this for simplicity and then work on caching.

# 2024-07-27
- Referencing 2023/animate-hex-lines.
- Remembering the structure of an animation.
  - AnimationPack
    - Animation map
    - Root Animation
  - Animation
    - Id
    - Guide layers
    - Visible layers
  - Layer
    - Opacity
    - Transform
    - Keyframes
  - Keyframe
    - Start
    - Duration
    - Group
  - Element
    - Opacity
    - Transform
    - Drawing or instance or group
  - Drawing
    - Line buffer
  - Instance
    - Animation id
  - Group
    - Elements
- Renamed Animation to Sprite and AnimationPack to Animation.
- Wrote and moved all class definitions in one file animation.js.
- Reconsidering using classes, maybe use plain JSON instead to make saving and loading trivial.
  - Won't be able to have lineBuffer instances inline, will need a separate mapping along side, will need extra resource management rather than relying on garbage collection like usual.
    - Can probably just do a clean up sweep on save.
    - Use incrementing numeric IDs.
- Rewriting animation definitions in TypeScript interfaces for JSON compat.
- Thinking about how to represent running sub animations.
- Thinking about how to represent animations on transform rather than the sprite.
