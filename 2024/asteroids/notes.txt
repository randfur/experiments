# 2025-02-13
- Updated to use common 2024/third-party.

# 2024-11-23
- Renames:
  - acceptDeath() -> whileAlive()
  - whenDead -> lifetime
  - die() -> destroy()
- Turned Collisions into a non-Entity.
  - Kept as an instance in case we want multiple collision layers.
- Considering colour transforms as part of LineDrawing.
  - Could have a colour override or a colour matrix.
- Ship is starting to get complicated.
  - Want collision polygons.
  - Want input handling.
  - Want physics object state.
  - Considering implementing these things into Entity as optional things that can be turned on.
    - initInputs()
    - initSprite()
    - initMotion()
    - initCollision()
  - Maybe best to do that after implementing it in Ship rather than before.
    - Having the initX() methods and clear grouping of related members and logic would still be good though.

# 2024-11-08
- TODO:
  - Shared line buffer.
  - Polygon colliders.
  - Bounding box tree collision detection.
  - Input handling.
    - Another entity like Collisions?
    - Does Collisions or Inputs need to be an entity?
    - Probably not, turn run() into init().
  - Text graphics.
  - Graphical layers?
    - Example:
      const layerKey = Engine.addDrawingLayer({pixelSize, opacity});
      Engine.add(new Thing(layerKey));
      class Thing {
        draw(layers) {
          layers[layerKey].children.push(this.drawing);
        }
      }
  - Actual game.
    - Convex asteroid polygons.
    - Ship movement.
    - Screen wrapping.
    - Keyboard controls.
    - Bullets.
    - Asteroid splitting.
    - Win/lose/scoring.
    - Particle effects.

# 2024-11-07
- Thinking about how to order stages of work per frame.
  - Maybe just have the stages as entities that run and expose promises for when their stage is completed that everything that depends on them can wait for.
  - Stages that depend on other stages just await their step being done.
- Added collision stage.
  - Used basic quadratic radius checking.
  - Added registration concept and cleanUp() method to Entities.
  - Works.
- Refactored Ship run to have two concurrent loops, one that loops checking for collision, one that loops per frame.
- Added the concept of running stuff concurrently in the background in run().
  - Doesn't really have any connection to run(), just needs to do the entity deathCheck() whenever it awaits.
  - Exposed an acceptDeath() method that just runs an async function and ignores the deathSignal.
- Names of things are kind of weird but make sense when thinking about things entirely around death of the entity.
  - Renamed destroy() to die().
  - Renamed deathCheck() to raceDeath().

# 2024-10-02
- Started using field "declarations" in the class definition similar to TypeScript.
- Moved the destroy() call into a finally block, it doesn't throw because it's not awaiting on the whenDead promise.

# 2024-09-24
- Writing a mini game engine.
- Inspired by async-game-engine but not bothering with nested job cancellation.
- Writing deathCheck() helper that wraps a promise and throws on death for an entity.
- If everything inside the entity uses deathCheck() then all concurrent async work it starts should all stop when the entity dies.
- Much simpler and more general than the nested jobs approach from async-game-engine, will probably port this over when I get back to working on that.
- Seems to work alright.
- Also made the game engine a singleton so everything has global access to it without needing to be passed an instance.
  - Probably not the best design for a general game engine but is good for this.
- Updating the drawing to be based on drawings rather than points in a line buffer.
  - Allows entities to use drawing transform and recycle line buffers between instances.
  - This works nicely.
- Added a once() utility that wraps a function and makes it callable only once, subsequent calls will be noops.
  - Using this for classes being able to set up shared resources just once.

# 2024-09-14
- Goal: Recreate https://www.youtube.com/watch?v=6puBZpFWsKY using hex-lines and JS.
- Asteroids are random convex polygons that can be shot into pieces.
- Maybe add powerups for more interesting mechanics later.
